1. POINTER SYNTAX

float salary = 3000.0f
float* rsalary = &salary;

pass salary as reference:
float findBonus(float* rsalary) {
     //code
     return 
}

to access salary(value mem block):
    *rsalary
float* rsalary = (float*)malloc(sizeof(float));   //dynamic memory

----------------------------------------------------------------

2. SYNTAX OF MALLOC 

   void* malloc(size in bytes);   //void* generic pointer
   
   float* salaries = (float*)malloc(sizeof(float) * 100);
   //salaries[I] I-> 0...99,
   //*(salaries + I)
   free salaries;

----------------------------------------------------------------

3. LINKED LIST NODE

struct Node_t {
     float data;
     struct Node_t * next;
};

struct Node_t* node1 = (struct Node_t*)malloc(sizeof(struct Node_t));

struct Emp_t {
    int num;
    char name[255];
    float salary;
};
struct Emp_t* remp = (struct Emp_t*)malloc(sizeof(struct Emp_t));

----------------------------------------------------------------

4. STRUCTURE FOR REAL WORLD OBJECT 
         [record/row/document]
         [tuple/relation]

#1
struct Emp_t {
    int num;
    char name[255];
    float salary;
};

struct Emp_t siya;

#2
typedef struct {
    int num;
    char name[255];
    float salary;
} Emp_t;

 Emp_t siya;

#3
struct _Emp_t{
     int num;
     char name[255];
     float salary;
} _Emp_t;

typedef struct _Emp_t Emp_t;

Emp_t siya; 
  //OR
struct _Emp_t siya;

----------------------------------------------------------------

5. APLLICATIONS OF LINKED LIST
a) Stack
b) Queue
c) Tree
 
----------------------------------------------------------------

6. SINGLY LINKED LIST (forward_list) OPERATIONS
a) Search by key/position
b) Create node in the beginning, given node
c) Delete by key/position
d) Reverse 
e) Traversal : forward, backward [iteration|recursion]

----------------------------------------------------------------

7. FORWARD TRAVERSAL

#include<stdio.h>
#include<stdlib.h>

typedef struct node_t{ 
      float data;
      struct node_t* next;
} node_t;


node_t* createNode(float item) {
        node_t* rE = (node_t*)malloc(sizeof(node_t));
        rE->data = item;
        rE->next = NULL;
        return rE;
}

void doTraversal(node_t* head) {
     node_t* rE = head;  //initialization
     while(rE != NULL) {
          printf("%.2f", rE->data);
          rE = rE->next; //update
     }
}


int main()
{
      //20.0f, 15.0f, 35.0f, 40.0f, 25.0f
      node_t* head = createNode(20.0f);
      head->next = createNode(15.0f);
      head->next->next = createNode(35.0f);
      head->next->next->next = createNode(40.0f);
      head->next->next->next->next = createNode(25.0f);
      
      doTraversal(head);
      return 0;

}

----------------------------------------------------------------

8. RECURSION

#include<stdio.h>
#include<stdlib.h>

typedef struct node_t{ 
      float data;
      struct node_t* next;
} node_t;


node_t* createNode(float item) {
        node_t* rE = (node_t*)malloc(sizeof(node_t));
        rE->data = item;
        rE->next = NULL;
        return rE;
}

void doTraversal(node_t* rE) {
           if(rE == NULL){
               return;
           }
           printf("%.2f", rE->data);
           doTraversal(re->next);
    
     }



int main()
{
      //20.0f, 15.0f, 35.0f, 40.0f, 25.0f
      node_t* head = createNode(20.0f);
      head->next = createNode(15.0f);
      head->next->next = createNode(35.0f);
      head->next->next->next = createNode(40.0f);
      head->next->next->next->next = createNode(25.0f);
      
      doTraversal(head);
      return 0;

}
----------------------------------------------------------------

9. FORWARD LIST INSERT (memory leak) 

#include <stdio.h>
#include <stdlib.h>

typedef struct _node_t{
    float data;
    struct _node_t* next;
} node_t;

node_t* createNode(float item) {
    node_t* rE = (node_t*)malloc(sizeof(node_t));
    rE->data = item;
    rE->next = NULL;
    return rE;
}

void doTraversal(node_t* head) {
    node_t* rE = head;
    while(rE != NULL) {
        printf("%.2f ",rE->data);
        rE = rE->next;
    }
}

node_t* insertFirst(node_t* head, float item) {
    node_t* rE = createNode(item);//[item,NULL]
    if(head==NULL){
        head = rE;
    }else{
        rE->next = head;
        head = rE;
    }
    return head;
}


int main()
{
    //20.0f, 15.0f, 35.0f, 40.0f, 25.0f    
    node_t* head = insertFirst(NULL,20.0f); //20.0f -> X
    head = insertFirst(head,15.0f); // 15.0f -> 20.0f -> X
    head = insertFirst(head,35.0f); // 35.0f -> 15.0f -> 20.0f -> X
    head = insertFirst(head,40.0f); // 40.0f -> 35.0f -> 15.0f -> 20.0f -> X
    head = insertFirst(head,25.0f); // 25.0f -> 40.0f -> 35.0f -> 15.0f -> 20.0f -> X
    doTraversal(head);
    //release alloc's blocks 
    return 0;
}

----------------------------------------------------------------

10. LEETCODE ADD TWO NUMBERS

struct ListNode* createNode(int item) {
    struct ListNode* rE = (struct ListNode*)malloc(sizeof(struct ListNode));
    rE->val = item;
    rE->next = NULL;
    return rE;
}
struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) {
    int d1=0,d2=0,carry=0;
    struct ListNode* output = NULL;
    struct ListNode* output_tail = NULL;


    struct ListNode* rE1 = l1;
    struct ListNode* rE2 = l2;
    while(rE1 != NULL || rE2 != NULL || carry != 0) {
        //construct output node and add to output list 
        d1 = 0;
        d2 = 0;
        if(rE1 != NULL) {
            d1 = rE1->val;
            rE1 = rE1->next;
        }
        if(rE2 != NULL) {
            d2 = rE2->val;
            rE2 = rE2->next;
        }
        int sum = d1 + d2 + carry;
        carry = sum / 10;
        sum = sum % 10;

        struct ListNode* oE = createNode(sum);
        if(output_tail == NULL){
            output_tail = oE;
            output = oE;
        }else{
            output_tail->next = oE;
            output_tail = oE;
        }
    }
    return output;
}

----------------------------------------------------------------

11. SWAP TWO NUMBERS 

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
 class Solution {
public:
struct ListNode* swapPairs(struct ListNode* head) {
    struct ListNode* rE1 = head;
    struct ListNode* rE2;
    while(rE1 != NULL) {
        rE2 = rE1->next;
        if(rE2 == NULL) {
            break;
        }
        int T = rE1->val;//do swap // by data 
        rE1->val = rE2->val;
        rE2->val = T; //
        rE1 = rE2->next;
    }
    return head;
}
 };

----------------------------------------------------------------

12. REMOVE Nth NODE FROM END 

int getSize(struct ListNode* head) {
    int size = 0;
    struct ListNode* rE = head;
    while(rE != NULL) {
        size++;
        rE = rE->next;
    }
    return size;
}
struct ListNode* findNodeAtN(struct ListNode* head, int N) {
    int size = 0;

    struct ListNode* rE = head;
    while(rE != NULL) {
        size++;
        if(size == N){
            break;
        }
        rE = rE->next;
    }
    return rE;
}
struct ListNode* removeNthFromEnd(struct ListNode* head, int n) {
    //n=2 from right side 
    //size=5,size-n=5-2=3 prev node before the node being node deleted
    int size = getSize(head);
    int fN = size-n+1;//from left size, the pos
    if(fN <= 0){
        return head;
    }
    if(fN == 1){
        struct ListNode* curr = head;
        head = curr->next;
        curr->next = NULL;
        free(curr);
    }else { 
        struct ListNode* prev = findNodeAtN(head,fN-1);
        struct ListNode* curr = prev->next;
        prev->next = curr->next;
        curr->next = NULL;
        free(curr);
    }
    return head;
}

----------------------------------------------------------------

13. MERGE TWO SORTED NUMBERS 

class Solution {
public:
	ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) 
  {
		if(l1 == NULL)       //if l1 empty return l2
        {
			return l2;
		}
	
		if(l2 == NULL)      //if l2 empty return l1
        {
			return l1;
		} 
			if(l1 -> val <= l2 -> val)          //if l1 value <=l2value
        {
			l1 -> next = mergeTwoLists(l1 -> next, l2);   //attach l2 to l1
			return l1;              //return 1st node of l1
		}
		
		else
        {
			l2 -> next = mergeTwoLists(l1, l2 -> next);     //viceversa
			return l2;            
		}
	}
};	
   







